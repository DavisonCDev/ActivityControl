spring.datasource.url=jdbc:mysql://localhost:3306/activitycontrol?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
spring.datasource.username=root
spring.datasource.password=123456
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.4.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.oksmart</groupId>
	<artifactId>activitycontrol</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Activity Control</name>
	<description>Controle de relatórios</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.36</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>5.4.0</version>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>5.16.1</version>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>


package com.oksmart.activitycontrol.model;

import lombok.Data;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;

@Data
@Entity
public class Activity {

    @Id
    private String cliente;
    private Integer central;
    private Integer linha;
    private Integer endereco;
    private String tipo;

    public Activity() {}

    public Activity(String cliente, Integer central, Integer linha, Integer endereco, String tipo) {
        this.cliente = cliente;
        this.central = central;
        this.linha = linha;
        this.endereco = endereco;
        this.tipo = tipo;
    }

    public String getCliente() {
        return cliente;
    }

    public void setCliente(String cliente) {
        this.cliente = cliente;
    }

    public Integer getCentral() {
        return central;
    }

    public void setCentral(Integer central) {
        this.central = central;
    }

    public Integer getLinha() {
        return linha;
    }

    public void setLinha(Integer linha) {
        this.linha = linha;
    }

    public Integer getEndereco() {
        return endereco;
    }

    public void setEndereco(Integer endereco) {
        this.endereco = endereco;
    }

    public String getTipo() {
        return tipo;
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }
}


package com.oksmart.activitycontrol.repository;

import com.oksmart.activitycontrol.model.Activity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ActivityRepository extends JpaRepository<Activity, String> {
    // Métodos personalizados de consulta podem ser definidos aqui, se necessário
}


package com.oksmart.activitycontrol.service;

import com.oksmart.activitycontrol.model.Activity;
import com.oksmart.activitycontrol.repository.ActivityRepository;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
public class ActivityService {

    @Autowired
    private ActivityRepository activityRepository;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Transactional
    public void atualizarDados() throws IOException {
        String filePath = "C:\\temp\\dataActivity.xlsx";
        try (FileInputStream fis = new FileInputStream(new File(filePath));
             Workbook workbook = new XSSFWorkbook(fis)) {

            Sheet sheet = workbook.getSheetAt(0);

            if (sheet.getPhysicalNumberOfRows() == 0) {
                System.out.println("O arquivo Excel está vazio.");
                return;
            }

            List<Activity> activities = new ArrayList<>();

            for (Row row : sheet) {
                if (row.getRowNum() == 0) continue;

                try {
                    String cliente = row.getCell(0).getStringCellValue();
                    Integer central = (int) row.getCell(1).getNumericCellValue();
                    Integer linha = (int) row.getCell(2).getNumericCellValue();
                    Integer endereco = (int) row.getCell(3).getNumericCellValue();
                    String tipo = row.getCell(4).getStringCellValue();

                    Activity activity = new Activity(cliente, central, linha, endereco, tipo);
                    activities.add(activity);

                    criarTabelaSeNecessario(cliente);
                    salvarDadosNaTabela(cliente, activity);
                } catch (Exception e) {
                    System.out.println("Erro ao processar a linha " + row.getRowNum() + ": " + e.getMessage());
                }
            }

            System.out.println("Total de atividades lidas: " + activities.size());

            if (activities.isEmpty()) {
                System.out.println("Nenhuma atividade foi lida do arquivo.");
            }
        } catch (IOException e) {
            throw new IOException("Erro ao processar o arquivo Excel: " + e.getMessage(), e);
        }
    }

    private void criarTabelaSeNecessario(String cliente) {
        String clienteTabela = cliente.replaceAll("\\s+", "_"); // Substitui espaços por underline
        String sql = "SHOW TABLES LIKE ?";
        List<String> tables = jdbcTemplate.queryForList(sql, String.class, clienteTabela);

        if (tables.isEmpty()) {
            String createTableSql = "CREATE TABLE `" + clienteTabela + "` ("
                    + "id BIGINT AUTO_INCREMENT PRIMARY KEY, "
                    + "cliente VARCHAR(255), "
                    + "central INT, "
                    + "linha INT, "
                    + "endereco INT, "
                    + "tipo VARCHAR(255)"
                    + ")";
            jdbcTemplate.execute(createTableSql);
            System.out.println("Tabela criada para o cliente: " + clienteTabela);
        } else {
            System.out.println("Tabela já existe para o cliente: " + clienteTabela);
        }
    }

    private void salvarDadosNaTabela(String cliente, Activity activity) {
        String clienteTabela = cliente.replaceAll("\\s+", "_"); // Substitui espaços por underline
        String insertSql = "INSERT INTO `" + clienteTabela + "` (cliente, central, linha, endereco, tipo) "
                + "VALUES (?, ?, ?, ?, ?)";
        jdbcTemplate.update(insertSql, activity.getCliente(), activity.getCentral(), activity.getLinha(), activity.getEndereco(), activity.getTipo());
        System.out.println("Atividade salva na tabela " + clienteTabela);
    }
}



package com.oksmart.activitycontrol.controller;

import com.oksmart.activitycontrol.service.ActivityService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;

@RestController
@RequestMapping("/api/activity")
public class ActivityController {

    @Autowired
    private ActivityService activityService;

    @PostMapping("/atualizar")
    public ResponseEntity<String> atualizarDados() {
        try {
            activityService.atualizarDados();
            return ResponseEntity.ok("Dados atualizados com sucesso!");
        } catch (IOException e) {
            return ResponseEntity.status(500).body("Erro ao atualizar os dados: " + e.getMessage());
        }
    }
}



package com.oksmart.activitycontrol.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.io.IOException;

@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(IOException.class)
    public ResponseEntity<String> handleIOException(IOException ex) {
        return new ResponseEntity<>("Erro ao processar o arquivo: " + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleException(Exception ex) {
        return new ResponseEntity<>("Erro inesperado: " + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
